
//1.cast

/*
    sha1.cpp - source code of

    ============
    SHA-1 in C++
    ============

    100% Public Domain.

    Original C Code
        -- Steve Reid <steve@edmweb.com>
    Small changes to fit into bglibs
        -- Bruce Guenter <bruce@untroubled.org>
    Translation to simpler C++ Code
        -- Volker Grabsch <vog@notjusthosting.com>
*/

/*#include "sha1.h"
#include <sstream>
#include <iomanip>
#include <fstream>*/

/* Help macros */
/*#define SHA1_ROL(value, bits) (((value) << (bits)) | (((value) & 0xffffffff) >> (32 - (bits))))
#define SHA1_BLK(i) (block[i&15] = SHA1_ROL(block[(i+13)&15] ^ block[(i+8)&15] ^ block[(i+2)&15] ^ block[i&15],1))*/

/* (R0+R1), R2, R3, R4 are the different operations used in SHA1 */
/*#define SHA1_R0(v,w,x,y,z,i) z += ((w&(x^y))^y)     + block[i]    + 0x5a827999 + SHA1_ROL(v,5); w=SHA1_ROL(w,30);
#define SHA1_R1(v,w,x,y,z,i) z += ((w&(x^y))^y)     + SHA1_BLK(i) + 0x5a827999 + SHA1_ROL(v,5); w=SHA1_ROL(w,30);
#define SHA1_R2(v,w,x,y,z,i) z += (w^x^y)           + SHA1_BLK(i) + 0x6ed9eba1 + SHA1_ROL(v,5); w=SHA1_ROL(w,30);
#define SHA1_R3(v,w,x,y,z,i) z += (((w|x)&y)|(w&x)) + SHA1_BLK(i) + 0x8f1bbcdc + SHA1_ROL(v,5); w=SHA1_ROL(w,30);
#define SHA1_R4(v,w,x,y,z,i) z += (w^x^y)           + SHA1_BLK(i) + 0xca62c1d6 + SHA1_ROL(v,5); w=SHA1_ROL(w,30);

SHA1::SHA1()
{
    reset();
}


void SHA1::update(const std::string &s)
{
    std::istringstream is(s);
    update(is);
}


void SHA1::update(std::istream &is)
{
    std::string rest_of_buffer;
    read(is, rest_of_buffer, BLOCK_BYTES - buffer.size());
    buffer += rest_of_buffer;

    while (is)
    {
        uint32 block[BLOCK_INTS];
        buffer_to_block(buffer, block);
        transform(block);
        read(is, buffer, BLOCK_BYTES);
    }
}*/


/*
 * Add padding and return the message digest.
 */

/*std::string SHA1::final()
{*/
    /* Total number of hashed bits */
//    uint64 total_bits = (transforms*BLOCK_BYTES + buffer.size()) * 8;

    /* Padding */
/*    buffer += 0x80;
    unsigned int orig_size = buffer.size();
    while (buffer.size() < BLOCK_BYTES)
    {
        buffer += (char)0x00;
    }

    uint32 block[BLOCK_INTS];
    buffer_to_block(buffer, block);

    if (orig_size > BLOCK_BYTES - 8)
    {
        transform(block);
        for (unsigned int i = 0; i < BLOCK_INTS - 2; i++)
        {
            block[i] = 0;
        }
    }*/

    /* Append total_bits, split this uint64 into two uint32 */
/*    block[BLOCK_INTS - 1] = total_bits;
    block[BLOCK_INTS - 2] = (total_bits >> 32);
    transform(block);*/

    /* Hex std::string */
/*    std::ostringstream result;
    for (unsigned int i = 0; i < DIGEST_INTS; i++)
    {
        result << std::hex << std::setfill('0') << std::setw(8);
        result << (digest[i] & 0xffffffff);
    }*/

    /* Reset for next run */
/*    reset();

    return result.str();
}


std::string SHA1::from_file(const std::string &filename)
{
    std::ifstream stream(filename.c_str(), std::ios::binary);
    SHA1 checksum;
    checksum.update(stream);
    return checksum.final();
}


void SHA1::reset()
{*/
    /* SHA1 initialization constants */
/*    digest[0] = 0x67452301;
    digest[1] = 0xefcdab89;
    digest[2] = 0x98badcfe;
    digest[3] = 0x10325476;
    digest[4] = 0xc3d2e1f0;*/

    /* Reset counters */
/*    transforms = 0;
    buffer = "";
}*/


/*
 * Hash a single 512-bit block. This is the core of the algorithm.
 */

/*void SHA1::transform(uint32 block[BLOCK_BYTES])
{*/
    /* Copy digest[] to working vars */
/*    uint32 a = digest[0];
    uint32 b = digest[1];
    uint32 c = digest[2];
    uint32 d = digest[3];
    uint32 e = digest[4];*/


    /* 4 rounds of 20 operations each. Loop unrolled. */
/*    SHA1_R0(a,b,c,d,e, 0);
    SHA1_R0(e,a,b,c,d, 1);
    SHA1_R0(d,e,a,b,c, 2);
    SHA1_R0(c,d,e,a,b, 3);
    SHA1_R0(b,c,d,e,a, 4);
    SHA1_R0(a,b,c,d,e, 5);
    SHA1_R0(e,a,b,c,d, 6);
    SHA1_R0(d,e,a,b,c, 7);
    SHA1_R0(c,d,e,a,b, 8);
    SHA1_R0(b,c,d,e,a, 9);
    SHA1_R0(a,b,c,d,e,10);
    SHA1_R0(e,a,b,c,d,11);
    SHA1_R0(d,e,a,b,c,12);
    SHA1_R0(c,d,e,a,b,13);
    SHA1_R0(b,c,d,e,a,14);
    SHA1_R0(a,b,c,d,e,15);
    SHA1_R1(e,a,b,c,d,16);
    SHA1_R1(d,e,a,b,c,17);
    SHA1_R1(c,d,e,a,b,18);
    SHA1_R1(b,c,d,e,a,19);
    SHA1_R2(a,b,c,d,e,20);
    SHA1_R2(e,a,b,c,d,21);
    SHA1_R2(d,e,a,b,c,22);
    SHA1_R2(c,d,e,a,b,23);
    SHA1_R2(b,c,d,e,a,24);
    SHA1_R2(a,b,c,d,e,25);
    SHA1_R2(e,a,b,c,d,26);
    SHA1_R2(d,e,a,b,c,27);
    SHA1_R2(c,d,e,a,b,28);
    SHA1_R2(b,c,d,e,a,29);
    SHA1_R2(a,b,c,d,e,30);
    SHA1_R2(e,a,b,c,d,31);
    SHA1_R2(d,e,a,b,c,32);
    SHA1_R2(c,d,e,a,b,33);
    SHA1_R2(b,c,d,e,a,34);
    SHA1_R2(a,b,c,d,e,35);
    SHA1_R2(e,a,b,c,d,36);
    SHA1_R2(d,e,a,b,c,37);
    SHA1_R2(c,d,e,a,b,38);
    SHA1_R2(b,c,d,e,a,39);
    SHA1_R3(a,b,c,d,e,40);
    SHA1_R3(e,a,b,c,d,41);
    SHA1_R3(d,e,a,b,c,42);
    SHA1_R3(c,d,e,a,b,43);
    SHA1_R3(b,c,d,e,a,44);
    SHA1_R3(a,b,c,d,e,45);
    SHA1_R3(e,a,b,c,d,46);
    SHA1_R3(d,e,a,b,c,47);
    SHA1_R3(c,d,e,a,b,48);
    SHA1_R3(b,c,d,e,a,49);
    SHA1_R3(a,b,c,d,e,50);
    SHA1_R3(e,a,b,c,d,51);
    SHA1_R3(d,e,a,b,c,52);
    SHA1_R3(c,d,e,a,b,53);
    SHA1_R3(b,c,d,e,a,54);
    SHA1_R3(a,b,c,d,e,55);
    SHA1_R3(e,a,b,c,d,56);
    SHA1_R3(d,e,a,b,c,57);
    SHA1_R3(c,d,e,a,b,58);
    SHA1_R3(b,c,d,e,a,59);
    SHA1_R4(a,b,c,d,e,60);
    SHA1_R4(e,a,b,c,d,61);
    SHA1_R4(d,e,a,b,c,62);
    SHA1_R4(c,d,e,a,b,63);
    SHA1_R4(b,c,d,e,a,64);
    SHA1_R4(a,b,c,d,e,65);
    SHA1_R4(e,a,b,c,d,66);
    SHA1_R4(d,e,a,b,c,67);
    SHA1_R4(c,d,e,a,b,68);
    SHA1_R4(b,c,d,e,a,69);
    SHA1_R4(a,b,c,d,e,70);
    SHA1_R4(e,a,b,c,d,71);
    SHA1_R4(d,e,a,b,c,72);
    SHA1_R4(c,d,e,a,b,73);
    SHA1_R4(b,c,d,e,a,74);
    SHA1_R4(a,b,c,d,e,75);
    SHA1_R4(e,a,b,c,d,76);
    SHA1_R4(d,e,a,b,c,77);
    SHA1_R4(c,d,e,a,b,78);
    SHA1_R4(b,c,d,e,a,79);*/

    /* Add the working vars back into digest[] */
/*    digest[0] += a;
    digest[1] += b;
    digest[2] += c;
    digest[3] += d;
    digest[4] += e;*/

    /* Count the number of transformations */
/*    transforms++;
}


void SHA1::buffer_to_block(const std::string &buffer, uint32 block[BLOCK_BYTES])
{*/
    /* Convert the std::string (byte buffer) to a uint32 array (MSB) */
/*    for (unsigned int i = 0; i < BLOCK_INTS; i++)
    {
        block[i] = (buffer[4*i+3] & 0xff)
                   | (buffer[4*i+2] & 0xff)<<8
                   | (buffer[4*i+1] & 0xff)<<16
                   | (buffer[4*i+0] & 0xff)<<24;
    }
}


void SHA1::read(std::istream &is, std::string &s, int max)
{
    char sbuf[max];
    is.read(sbuf, max);
    s.assign(sbuf, is.gcount());
}


std::string sha1(const std::string &string)
{
    SHA1 checksum;
    checksum.update(string);
    return checksum.final();
}*/



//2.cast
#include <stdbool.h>
#include <stddef.h>

/* 
 * Computes the next lexicographical permutation of the specified
 * array of integers in place, returning a Boolean to indicate
 * whether a next permutation existed. (Returns false when the
 * argument is already the last possible permutation.)
 */
bool next_permutation(int array[], size_t length) {
    // Find non-increasing suffix
    if (length == 0)
        return false;
    size_t i = length - 1;
    while (i > 0 && array[i - 1] >= array[i])
        i--;
    if (i == 0)
        return false;
    
    // Find successor to pivot
    size_t j = length - 1;
    while (array[j] <= array[i - 1])
        j--;
    int temp = array[i - 1];
    array[i - 1] = array[j];
    array[j] = temp;
    
    // Reverse suffix
    j = length - 1;
    while (i < j) {
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i++;
        j--;
    }
    return true;
}






//3.cast
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include "sha1.h"  /** <- FAKE BIPS39 hash public key **/

using namespace std;

string words[]={"akce","bambus","blud","dnes","hmat","lump","mzda","ocel","revma","sysel","zmar","zubr"};

/**
vyuzito odkaz: http://www.zedwood.com/article/cpp-sha1-function
        odkaz: https://github.com/bitcoin/bips/blob/master/bip-0039/czech.txt

Seznam slov:
1 akce
2 bambus
3 blud
4 dnes
5 hmat
6 lump
7 mzda
8 ocel
9 revma
10 sysel
11 zmar
12 zubr

Naplnte seznam cisly 1 - 12 (zadne cislo se neopakuje) a predejte funkci VypoctiHash(seznam), ktera vraci hash = string (pole znaku).
Hledejte tak dlouho, dokud nenajdete odpovidajici hash, az jej najdete, nasli jste spravne poradi slov.

**/

string VypoctiHash(int seznam[]);
bool next_permutation(char *array, int length);
void reverse(char *array, int length);
void swap(char *c1, char *c2);
void print_arr(int arr[], int length);


int main(int argc, char *argv[])
{
  // tak to můžeš zkusit, ok
  const int length = 12;
  int seznam[length];
  string hashHledany = "d99fa327540d376faf85ffb64bfe95c0191a428f";
 
  //budu jeste vzhuru do 00:00 takze casu mam dost
  seznam[0] = 1;
  seznam[1] = 2;
  seznam[2] = 3;
  seznam[3] = 4;
  seznam[4] = 5;
  seznam[5] = 6;
  seznam[6] = 7;
  seznam[7] = 8;
  seznam[8] = 9;
  seznam[9] = 10;
  seznam[10] = 11;
  seznam[11] = 12;
  
  do
  {
    if (hashHledany == VypoctiHash(seznam))
    {
      printf("yay!\n");
      // máš řešení
      break;
    }
  } while (next_permutation(seznam, length));

  if (hashHledany != VypoctiHash(seznam))
    printf("Smula\n");
  else{
    print_arr(seznam, length);
  }

  return 0;
}

void print_arr(int arr[], int length)
{
  printf("Seznam je: ");
  for (int i = 0; i < length; i++)
  {
    printf("%d ", arr[i]);
  }
  printf("\n");
}

string VypoctiHash(int seznam[]){

    std::string SpojeniSlov = words[seznam[0]-1];

    for(int i=1;i<12;i++)
        SpojeniSlov.append(words[seznam[i]-1]);

    return sha1(SpojeniSlov);
}

bool next_permutation(char *array, int length)
{
    // find pivot
    int pivot;
    for (pivot = length - 1; pivot > 0 && array[pivot - 1] > array[pivot]; pivot--) ;
    pivot--;

    // if there is no pivot the array is already in its last permutation
    if (pivot < 0)
        return false;

    // find the 'smallest value larger than pivot' (svltp) to the right of pivot (there will always be at leas one)
    int svltp;
    for (svltp = length - 1; array[svltp] < array[pivot]; svltp--) ;

    // swap pivot and sltp
    swap(&array[pivot], &array[svltp]);

    // reverse everything to the right of pivot
    reverse(&array[pivot + 1], length - pivot - 1);

    return true;
}

void reverse(char *array, int length)
{
    int lim = length / 2;
    for (int i = 0; i < lim; i++)
        swap(&array[i], &array[length - 1 - i]);
}

void swap(char *c1, char *c2)
{
    char h = *c1;
    *c1 = *c2;
    *c2 = h;
}

/*int main(int argc, char *argv[])
{
    const int length = 12;
    char seznam[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

    do
    {
        if (final(seznam, length, "d99fa327540d376faf85ffb64bfe95c0191a428f"))
        {
            // máš řešení
            return EXIT_SUCCESS;
        }
    } while (next_permutation(seznam, length));
    // řešení jsi nenašel
    return EXIT_FAILURE;
}*/


